<?php

namespace App\Models {

  /**
   * App\Models\Admin
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property string|null $remember_token
   * @property string $password
   * @property string|null $image
   * @property string|null $email_verified_at
   * @property string|null $username
   * @property string|null $email
   * @property string|null $name
   * @property int $id
   * @property-read mixed $image_src
   * @property-read mixed $status_badge
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Role> $roles
   * @property-read int|null $roles_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Permission> $permissions
   * @property-read int|null $permissions_count
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereUsername($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin role()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin withoutRole()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin permission()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin withoutPermission()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin active()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Admin>|Admin query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Admin extends \Illuminate\Foundation\Auth\User
  {
    //
  }

  /**
   * App\Models\AdminNotification
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $click_url
   * @property bool $is_read
   * @property string|null $title
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification whereTitle($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification whereIsRead($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification whereClickUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AdminNotification>|AdminNotification query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class AdminNotification extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\AdminPasswordReset
   *
   * @property string|null $created_at
   * @property bool $status
   * @property string|null $token
   * @property string|null $email
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset whereToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AdminPasswordReset>|AdminPasswordReset query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class AdminPasswordReset extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\AgentPermission
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $group_name
   * @property string $guard_name
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $agents
   * @property-read int|null $agents_count
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission whereGuardName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission whereGroupName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AgentPermission>|AgentPermission query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class AgentPermission extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\AiAssistant
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property string|null $url
   * @property object|null $config
   * @property string|null $provider
   * @property string|null $info
   * @property string|null $name
   * @property int $id
   * @property-read mixed $status_badge
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereInfo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereProvider($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereConfig($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant active()
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AiAssistant>|AiAssistant query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class AiAssistant extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\AiUserSetting
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property int $max_length
   * @property string|null $fallback_response
   * @property string|null $system_prompt
   * @property bool $reply_type
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereReplyType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereSystemPrompt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereFallbackResponse($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereMaxLength($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<AiUserSetting>|AiUserSetting query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class AiUserSetting extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Campaign
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $total_failed
   * @property int $total_success
   * @property int $total_send
   * @property int $total_message
   * @property bool $status
   * @property bool $et
   * @property string|null $send_at
   * @property array|null $template_body_params
   * @property array|null $template_header_params
   * @property int $template_id
   * @property int $user_id
   * @property string|null $title
   * @property int $whatsapp_account_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\User $user
   * @property-read \App\Models\WhatsappAccount $whatsappAccount
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Message> $messages
   * @property-read int|null $messages_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $contacts
   * @property-read int|null $contacts_count
   * @property-read \App\Models\Template $template
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereWhatsappAccountId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTitle($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTemplateId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTemplateHeaderParams($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTemplateBodyParams($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereSendAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereEt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTotalMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTotalSend($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTotalSuccess($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereTotalFailed($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Campaign>|Campaign query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Campaign extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CampaignContact
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $send_at
   * @property bool $status
   * @property int $contact_id
   * @property int $campaign_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\Contact $contact
   * @property-read \App\Models\Campaign $campaign
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact whereCampaignId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact whereContactId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact whereSendAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CampaignContact>|CampaignContact query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CampaignContact extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Chatbot
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property string|null $text
   * @property string|null $keywords
   * @property int $user_id
   * @property int $whatsapp_account_id
   * @property string|null $title
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\WhatsappAccount $whatsapp
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereTitle($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereWhatsappAccountId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereKeywords($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereText($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot active()
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Chatbot>|Chatbot query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Chatbot extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Contact
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $is_customer
   * @property array|null $details
   * @property bool $status
   * @property string|null $image
   * @property string|null $mobile
   * @property string|null $mobile_code
   * @property string|null $lastname
   * @property string|null $firstname
   * @property int $user_id
   * @property int $id
   * @property-read mixed $mobile_number
   * @property-read mixed $image_src
   * @property-read mixed $full_name
   * @property-read mixed $full_name_short_form
   * @property-read \App\Models\User $user
   * @property-read \App\Models\Conversation $conversation
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ContactList> $lists
   * @property-read int|null $lists_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ContactTag> $tags
   * @property-read int|null $tags_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ContactList> $contactListContact
   * @property-read int|null $contactListContact_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Campaign> $campaigns
   * @property-read int|null $campaigns_count
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereFirstname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereLastname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereMobileCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereMobile($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereDetails($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereIsCustomer($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Contact extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ContactList
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $name
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $contact
   * @property-read int|null $contact_count
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactList>|ContactList query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ContactList extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ContactListContact
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $contact_list_id
   * @property int $contact_id
   * @property int $id
   * @property-read \App\Models\Contact $contact
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact whereContactId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact whereContactListId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactListContact>|ContactListContact query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ContactListContact extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ContactNote
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $note
   * @property int $conversation_id
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @property-read \App\Models\Conversation $conversation
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote whereConversationId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote whereNote($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactNote>|ContactNote query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ContactNote extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ContactTag
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $name
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $contacts
   * @property-read int|null $contacts_count
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ContactTag>|ContactTag query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ContactTag extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Conversation
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $needs_human_reply
   * @property \Illuminate\Support\Carbon|null $last_message_at
   * @property int $whatsapp_account_id
   * @property bool $status
   * @property int $contact_id
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\Contact $contact
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Message> $messages
   * @property-read int|null $messages_count
   * @property-read \App\Models\Message $lastMessage
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Message> $unseenMessages
   * @property-read int|null $unseenMessages_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ContactNote> $notes
   * @property-read int|null $notes_count
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereContactId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereWhatsappAccountId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereLastMessageAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereNeedsHumanReply($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Conversation>|Conversation query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Conversation extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Coupon
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property int $per_user_limit
   * @property int $use_limit
   * @property \Illuminate\Support\Carbon|null $end_date
   * @property \Illuminate\Support\Carbon|null $start_date
   * @property float $min_purchase_amount
   * @property float $amount
   * @property bool $type
   * @property string|null $name
   * @property string|null $code
   * @property int $id
   * @property-read mixed $duration
   * @property-read mixed $duration_days
   * @property-read mixed $status_badge
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PlanPurchase> $totalUses
   * @property-read int|null $totalUses_count
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereMinPurchaseAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereStartDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereEndDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereUseLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon wherePerUserLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon active()
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon expired()
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Coupon>|Coupon query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Coupon extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CronJob
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $is_default
   * @property bool $is_running
   * @property string|null $last_run
   * @property string|null $next_run
   * @property int $cron_schedule_id
   * @property string|null $url
   * @property array|null $action
   * @property string|null $alias
   * @property string|null $name
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\CronSchedule $schedule
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\CronJobLog> $logs
   * @property-read int|null $logs_count
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereAlias($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereAction($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereCronScheduleId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereNextRun($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereLastRun($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereIsRunning($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereIsDefault($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob active()
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CronJob>|CronJob query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CronJob extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CronJobLog
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $error
   * @property int $duration
   * @property string|null $end_at
   * @property string|null $start_at
   * @property int $cron_job_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereCronJobId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereStartAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereEndAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereDuration($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereError($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CronJobLog>|CronJobLog query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CronJobLog extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CronSchedule
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property int $interval
   * @property string|null $name
   * @property int $id
   * @property-read mixed $status_badge
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule whereInterval($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule active()
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CronSchedule>|CronSchedule query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CronSchedule extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CtaUrl
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property array|null $footer
   * @property array|null $action
   * @property array|null $body
   * @property array|null $header
   * @property string|null $header_format
   * @property string|null $cta_url
   * @property string|null $name
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Message> $messages
   * @property-read int|null $messages_count
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereCtaUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereHeaderFormat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereHeader($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereBody($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereAction($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereFooter($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CtaUrl>|CtaUrl query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CtaUrl extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Deposit
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int|null $last_cron
   * @property string|null $failed_url
   * @property string|null $success_url
   * @property string|null $admin_feedback
   * @property bool $from_api
   * @property bool $status
   * @property int $payment_try
   * @property string|null $trx
   * @property string|null $btc_wallet
   * @property string|null $btc_amount
   * @property object|null $detail
   * @property float $final_amount
   * @property float $rate
   * @property float $charge
   * @property string|null $method_currency
   * @property float $amount
   * @property int $method_code
   * @property bool $plan_recurring_type
   * @property int $coupon_id
   * @property int $plan_id
   * @property int $user_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\User $user
   * @property-read \App\Models\Gateway $gateway
   * @property-read \App\Models\PricingPlan $pricingPlan
   * @property-read \App\Models\Coupon $coupon
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit wherePlanId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereCouponId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit wherePlanRecurringType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereMethodCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereMethodCurrency($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereRate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereFinalAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereDetail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereBtcAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereBtcWallet($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereTrx($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit wherePaymentTry($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereFromApi($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereAdminFeedback($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereSuccessUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereFailedUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereLastCron($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit pending()
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit rejected()
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit approved()
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit successful()
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit initiated()
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Deposit>|Deposit query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Deposit extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\DeviceToken
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $token
   * @property bool $is_app
   * @property int $user_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken whereIsApp($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken whereToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<DeviceToken>|DeviceToken query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class DeviceToken extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Extension
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property string|null $support
   * @property object|null $shortcode
   * @property string|null $script
   * @property string|null $image
   * @property string|null $info
   * @property string|null $description
   * @property string|null $name
   * @property string|null $act
   * @property int $id
   * @property-read mixed $status_badge
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereAct($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereInfo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereScript($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereShortcode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereSupport($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension generateScript()
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension active()
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Extension>|Extension query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Extension extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Floater
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $color_code
   * @property string|null $message
   * @property string|null $mobile
   * @property string|null $dial_code
   * @property int $user_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereDialCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereMobile($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereColorCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Floater>|Floater query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Floater extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Form
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property object|null $form_data
   * @property string|null $act
   * @property int $id
   * @property-read mixed $json_data
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form whereAct($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form whereFormData($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Form>|Form query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Form extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Frontend
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $slug
   * @property string|null $tempname
   * @property object|null $seo_content
   * @property object|null $data_values
   * @property string|null $data_keys
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereDataKeys($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereDataValues($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereSeoContent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereTempname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereSlug($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Frontend>|Frontend query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Frontend extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Gateway
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $description
   * @property object|null $extra
   * @property bool $crypto
   * @property object|null $supported_currencies
   * @property string|null $gateway_parameters
   * @property bool $status
   * @property string|null $image
   * @property string $alias
   * @property string|null $name
   * @property string|null $code
   * @property int $form_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\GatewayCurrency> $currencies
   * @property-read int|null $currencies_count
   * @property-read \App\Models\Form $form
   * @property-read \App\Models\GatewayCurrency $singleCurrency
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereFormId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereAlias($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereGatewayParameters($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereSupportedCurrencies($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereCrypto($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereExtra($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway crypto()
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway automatic()
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway manual()
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway active()
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Gateway>|Gateway query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Gateway extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\GatewayCurrency
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $gateway_parameter
   * @property float $rate
   * @property float $fixed_charge
   * @property float $percent_charge
   * @property float $max_amount
   * @property float $min_amount
   * @property string|null $gateway_alias
   * @property int|null $method_code
   * @property string|null $symbol
   * @property string|null $currency
   * @property string|null $name
   * @property int $id
   * @property-read \App\Models\Gateway $method
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereCurrency($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereSymbol($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereMethodCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereGatewayAlias($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereMinAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereMaxAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency wherePercentCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereFixedCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereRate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereGatewayParameter($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency baseCurrency()
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency baseSymbol()
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<GatewayCurrency>|GatewayCurrency query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class GatewayCurrency extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\GeneralSetting
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property object|null $pusher_config
   * @property string|null $preloader_image
   * @property string|null $thousand_separator
   * @property int $allow_precision
   * @property string|null $date_format
   * @property string|null $time_format
   * @property bool $currency_format
   * @property int $paginate_number
   * @property bool $system_customized
   * @property string|null $available_version
   * @property string|null $last_cron
   * @property object|null $socialite_credentials
   * @property string|null $active_template
   * @property bool $registration
   * @property bool $multi_language
   * @property bool $agree
   * @property bool $secure_password
   * @property bool $maintenance_mode
   * @property bool $in_app_payment
   * @property bool $force_ssl
   * @property bool $pn
   * @property bool $sn
   * @property bool $sv
   * @property bool $en
   * @property bool $ev
   * @property bool $kv
   * @property object|null $global_shortcodes
   * @property object|null $firebase_config
   * @property object|null $sms_config
   * @property object|null $mail_config
   * @property string|null $base_color
   * @property string|null $push_template
   * @property string|null $push_title
   * @property string|null $sms_from
   * @property string|null $meta_configuration_id
   * @property string|null $meta_app_secret
   * @property string|null $meta_app_id
   * @property bool $whatsapp_embedded_signup
   * @property string|null $webhook_verify_token
   * @property int $subscription_notify_before
   * @property float $referral_amount_percentage
   * @property string|null $sms_template
   * @property string|null $email_template
   * @property string|null $email_from_name
   * @property string|null $email_from
   * @property string|null $cur_sym
   * @property string|null $cur_text
   * @property string|null $site_name
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSiteName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereCurText($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereCurSym($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereEmailFrom($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereEmailFromName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereEmailTemplate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSmsTemplate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereReferralAmountPercentage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSubscriptionNotifyBefore($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereWebhookVerifyToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereWhatsappEmbeddedSignup($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereMetaAppId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereMetaAppSecret($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereMetaConfigurationId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSmsFrom($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting wherePushTitle($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting wherePushTemplate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereBaseColor($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereMailConfig($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSmsConfig($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereFirebaseConfig($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereGlobalShortcodes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereKv($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereEv($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereEn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSv($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting wherePn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereForceSsl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereInAppPayment($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereMaintenanceMode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSecurePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereAgree($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereMultiLanguage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereRegistration($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereActiveTemplate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSocialiteCredentials($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereLastCron($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereAvailableVersion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereSystemCustomized($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting wherePaginateNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereCurrencyFormat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereTimeFormat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereDateFormat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereAllowPrecision($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereThousandSeparator($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting wherePreloaderImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting wherePusherConfig($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting siteName()
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<GeneralSetting>|GeneralSetting query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class GeneralSetting extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Language
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $info
   * @property string|null $image
   * @property bool $is_default
   * @property string|null $code
   * @property string|null $name
   * @property int $id
   * @property-read mixed $image_src
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereIsDefault($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereInfo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Language extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Message
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $ai_reply
   * @property string|null $ordering
   * @property bool $status
   * @property string|null $send_at
   * @property string|null $media_path
   * @property string|null $media_filename
   * @property string|null $media_caption
   * @property string|null $mime_type
   * @property string|null $media_type
   * @property string|null $media_url
   * @property string|null $media_id
   * @property bool $message_type
   * @property bool $type
   * @property string|null $message
   * @property int $cta_url_id
   * @property int $agent_id
   * @property int $conversation_id
   * @property int $template_id
   * @property int $chatbot_id
   * @property int $campaign_id
   * @property int $whatsapp_account_id
   * @property string|null $whatsapp_message_id
   * @property int $user_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\Conversation $conversation
   * @property-read \App\Models\User $user
   * @property-read \App\Models\User $agent
   * @property-read \App\Models\Campaign $campaign
   * @property-read \App\Models\Template $template
   * @property-read \App\Models\Chatbot $chatbot
   * @property-read \App\Models\CtaUrl $ctaUrl
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereWhatsappMessageId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereWhatsappAccountId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereCampaignId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereChatbotId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereTemplateId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereConversationId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereAgentId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereCtaUrlId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMessageType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMediaId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMediaUrl($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMediaType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMimeType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMediaCaption($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMediaFilename($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereMediaPath($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereSendAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereOrdering($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereAiReply($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Message>|Message query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Message extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\NotificationLog
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $user_read
   * @property string|null $image
   * @property string|null $notification_type
   * @property string|null $message
   * @property string|null $subject
   * @property string|null $sent_to
   * @property string|null $sent_from
   * @property string|null $sender
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereSender($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereSentFrom($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereSentTo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereSubject($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereNotificationType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereUserRead($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationLog>|NotificationLog query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class NotificationLog extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\NotificationTemplate
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $push_status
   * @property string|null $sms_sent_from
   * @property bool $sms_status
   * @property string|null $email_sent_from_address
   * @property string|null $email_sent_from_name
   * @property bool $email_status
   * @property object|null $shortcodes
   * @property string|null $push_body
   * @property string|null $sms_body
   * @property string|null $email_body
   * @property string|null $push_title
   * @property string|null $subject
   * @property string|null $name
   * @property string|null $act
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereAct($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereSubject($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate wherePushTitle($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereEmailBody($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereSmsBody($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate wherePushBody($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereShortcodes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereEmailStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereEmailSentFromName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereEmailSentFromAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereSmsStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereSmsSentFrom($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate wherePushStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<NotificationTemplate>|NotificationTemplate query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class NotificationTemplate extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Page
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $is_default
   * @property object|null $seo_content
   * @property string|null $secs
   * @property string|null $tempname
   * @property string|null $slug
   * @property string|null $name
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereSlug($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereTempname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereSecs($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereSeoContent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereIsDefault($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Page extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\PasswordReset
   *
   * @property string|null $created_at
   * @property string|null $token
   * @property string|null $email
   * @method static \Illuminate\Database\Eloquent\Builder<PasswordReset>|PasswordReset whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PasswordReset>|PasswordReset whereToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PasswordReset>|PasswordReset whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PasswordReset>|PasswordReset newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PasswordReset>|PasswordReset newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PasswordReset>|PasswordReset query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class PasswordReset extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\PlanPurchase
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $is_sent_reminder_notify
   * @property bool $is_sent_expired_notify
   * @property \Illuminate\Support\Carbon|null $expired_at
   * @property bool $auto_renewal
   * @property int $gateway_method_code
   * @property bool $payment_method
   * @property float $discount_amount
   * @property float $amount
   * @property bool $recurring_type
   * @property int $coupon_id
   * @property int $user_id
   * @property int $plan_id
   * @property int $id
   * @property-read mixed $billing_cycle
   * @property-read mixed $get_payment_method
   * @property-read mixed $status_badge
   * @property-read \App\Models\User $user
   * @property-read \App\Models\Coupon $coupon
   * @property-read \App\Models\PricingPlan $plan
   * @property-read \App\Models\Gateway $gateway
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase wherePlanId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereCouponId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereRecurringType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereDiscountAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase wherePaymentMethod($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereGatewayMethodCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereAutoRenewal($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereExpiredAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereIsSentExpiredNotify($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereIsSentReminderNotify($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase expired()
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase active()
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PlanPurchase>|PlanPurchase query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class PlanPurchase extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\PricingPlan
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $is_popular
   * @property bool|null $status
   * @property int $agent_limit
   * @property int $floater_limit
   * @property int $short_link_limit
   * @property int $campaign_limit
   * @property int $chatbot_limit
   * @property bool $ai_assistance
   * @property bool $welcome_message
   * @property int $template_limit
   * @property int $contact_limit
   * @property int $account_limit
   * @property float $yearly_price
   * @property float $monthly_price
   * @property string|null $description
   * @property string|null $name
   * @property int $id
   * @property-read mixed $popular_badge
   * @property-read mixed $campaign_badge
   * @property-read mixed $status_badge
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PlanPurchase> $subscriptions
   * @property-read int|null $subscriptions_count
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereMonthlyPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereYearlyPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereAccountLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereContactLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereTemplateLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereWelcomeMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereAiAssistance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereChatbotLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereCampaignLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereShortLinkLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereFloaterLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereAgentLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereIsPopular($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan active()
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PricingPlan>|PricingPlan query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class PricingPlan extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ShortLink
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $click
   * @property string|null $qr_code
   * @property string|null $message
   * @property string|null $mobile
   * @property string|null $dial_code
   * @property string|null $code
   * @property int $user_id
   * @property int $id
   * @property-read mixed $mobile_number
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereDialCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereMobile($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereQrCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereClick($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ShortLink>|ShortLink query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ShortLink extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Subscriber
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $email
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<Subscriber>|Subscriber whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscriber>|Subscriber whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscriber>|Subscriber whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscriber>|Subscriber whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscriber>|Subscriber newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscriber>|Subscriber newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscriber>|Subscriber query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Subscriber extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\SupportAttachment
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $attachment
   * @property int $support_message_id
   * @property int $id
   * @property-read mixed $encrypted_id
   * @property-read \App\Models\SupportMessage $supportMessage
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment whereSupportMessageId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment whereAttachment($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportAttachment>|SupportAttachment query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class SupportAttachment extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\SupportMessage
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $message
   * @property int $admin_id
   * @property int $support_ticket_id
   * @property int $id
   * @property-read \App\Models\SupportTicket $ticket
   * @property-read \App\Models\Admin $admin
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SupportAttachment> $attachments
   * @property-read int|null $attachments_count
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage whereSupportTicketId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage whereAdminId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage whereMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportMessage>|SupportMessage query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class SupportMessage extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\SupportTicket
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $last_reply
   * @property bool $priority
   * @property bool $status
   * @property string|null $subject
   * @property string|null $ticket
   * @property string|null $phone
   * @property string|null $email
   * @property string|null $name
   * @property int|null $user_id
   * @property int $id
   * @property-read mixed $fullname
   * @property-read mixed $username
   * @property-read mixed $status_badge
   * @property-read mixed $priority_badge
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SupportMessage> $supportMessage
   * @property-read int|null $supportMessage_count
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereTicket($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereSubject($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket wherePriority($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereLastReply($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket pending()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket closed()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket answered()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupportTicket>|SupportTicket query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class SupportTicket extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Template
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $rejected_reason
   * @property bool $status
   * @property int $language_id
   * @property int $category_id
   * @property int|null $code_expiration_minutes
   * @property bool $add_security_recommendation
   * @property string|null $footer
   * @property array|null $buttons
   * @property array|null $body
   * @property string|null $header_media
   * @property string|null $header_format
   * @property array|null $header
   * @property string|null $name
   * @property int $whatsapp_account_id
   * @property string|null $whatsapp_template_id
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @property-read \App\Models\TemplateCategory $category
   * @property-read \App\Models\WhatsappAccount $whatsappAccount
   * @property-read \App\Models\TemplateLanguage $language
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Campaign> $campaigns
   * @property-read int|null $campaigns_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Message> $messages
   * @property-read int|null $messages_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TemplateCard> $cards
   * @property-read int|null $cards_count
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereWhatsappTemplateId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereWhatsappAccountId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereHeader($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereHeaderFormat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereHeaderMedia($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereBody($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereButtons($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereFooter($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereAddSecurityRecommendation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereCodeExpirationMinutes($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereCategoryId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereLanguageId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereRejectedReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template approved()
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template pending()
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template rejected()
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template disabled()
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Template>|Template query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Template extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\TemplateCard
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property array|null $buttons
   * @property string|null $media_path
   * @property string|null $media_id
   * @property array|null $header
   * @property string|null $header_format
   * @property int $template_id
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\Template $template
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereTemplateId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereHeaderFormat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereHeader($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereMediaId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereMediaPath($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereButtons($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCard>|TemplateCard query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class TemplateCard extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\TemplateCategory
   *
   * @property string|null $label
   * @property string|null $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Template> $templates
   * @property-read int|null $templates_count
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCategory>|TemplateCategory whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCategory>|TemplateCategory whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCategory>|TemplateCategory whereLabel($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCategory>|TemplateCategory newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCategory>|TemplateCategory newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateCategory>|TemplateCategory query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class TemplateCategory extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\TemplateLanguage
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $country
   * @property string|null $code
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Template> $templates
   * @property-read int|null $templates_count
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage whereCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage whereCountry($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TemplateLanguage>|TemplateLanguage query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class TemplateLanguage extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Transaction
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $remark
   * @property string|null $details
   * @property string|null $trx
   * @property string|null $trx_type
   * @property float $post_balance
   * @property float $charge
   * @property float $amount
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction wherePostBalance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereTrxType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereTrx($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereDetails($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereRemark($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Transaction extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $is_deleted
   * @property string|null $plan_expired_at
   * @property int $agent_limit
   * @property int $floater_limit
   * @property int $short_link_limit
   * @property int $campaign_limit
   * @property int $chatbot_limit
   * @property bool $ai_assistance
   * @property bool $welcome_message
   * @property int $template_limit
   * @property int $contact_limit
   * @property int $account_limit
   * @property int $plan_id
   * @property bool $is_agent
   * @property int $parent_id
   * @property string|null $provider_id
   * @property string|null $provider
   * @property string|null $remember_token
   * @property string|null $ban_reason
   * @property bool $pn
   * @property bool $sn
   * @property bool $en
   * @property string|null $tsc
   * @property bool $tv
   * @property bool $ts
   * @property \Illuminate\Support\Carbon|null $ver_code_send_at
   * @property string|null $ver_code
   * @property bool $profile_complete
   * @property bool $sv
   * @property bool $ev
   * @property bool $kv
   * @property string|null $kyc_rejection_reason
   * @property object|null $kyc_data
   * @property bool $status
   * @property string|null $address
   * @property string|null $zip
   * @property string|null $state
   * @property string|null $city
   * @property string|null $country_code
   * @property string|null $country_name
   * @property string $password
   * @property float $balance
   * @property int $ref_by
   * @property string|null $mobile
   * @property string|null $dial_code
   * @property string|null $image
   * @property string $email
   * @property string|null $username
   * @property string|null $lastname
   * @property string|null $firstname
   * @property int $id
   * @property-read mixed $fullname
   * @property-read mixed $image_src
   * @property-read mixed $full_name_short_form
   * @property-read mixed $mobile_number
   * @property-read \App\Models\PricingPlan $plan
   * @property-read \App\Models\AiUserSetting $aiSetting
   * @property-read \App\Models\User $parent
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AgentPermission> $agentPermissions
   * @property-read int|null $agentPermissions_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Template> $templates
   * @property-read int|null $templates_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PlanPurchase> $purchases
   * @property-read int|null $purchases_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\WhatsappAccount> $whatsappAccounts
   * @property-read int|null $whatsappAccounts_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\UserLogin> $loginLogs
   * @property-read int|null $loginLogs_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Transaction> $transactions
   * @property-read int|null $transactions_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Deposit> $deposits
   * @property-read int|null $deposits_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Withdrawal> $withdrawals
   * @property-read int|null $withdrawals_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SupportTicket> $tickets
   * @property-read int|null $tickets_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ContactNote> $notes
   * @property-read int|null $notes_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Conversation> $conversations
   * @property-read int|null $conversations_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Campaign> $campaigns
   * @property-read int|null $campaigns_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Message> $messages
   * @property-read int|null $messages_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DeviceToken> $deviceTokens
   * @property-read int|null $deviceTokens_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Sanctum\PersonalAccessToken> $tokens
   * @property-read int|null $tokens_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFirstname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLastname($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUsername($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDialCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMobile($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRefBy($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBalance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCountryName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCountryCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereState($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereZip($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereKycData($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereKycRejectionReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereKv($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEv($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSv($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereProfileComplete($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereVerCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereVerCodeSendAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTs($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTv($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTsc($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePn($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBanReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereProvider($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereProviderId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereParentId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIsAgent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePlanId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAccountLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereContactLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTemplateLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereWelcomeMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAiAssistance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereChatbotLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCampaignLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereShortLinkLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFloaterLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAgentLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePlanExpiredAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIsDeleted($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User agent()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User active()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User banned()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User emailUnverified()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mobileUnverified()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User kycUnverified()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User kycPending()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User emailVerified()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mobileVerified()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User withBalance()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectedUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User allUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User emptyBalanceUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User twoFaDisableUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User twoFaEnableUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User deletedUser()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User hasDepositedUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User notDepositedUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User pendingDepositedUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rejectedDepositedUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User topDepositedUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User hasWithdrawUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User pendingWithdrawUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rejectedWithdrawUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User pendingTicketUser()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User closedTicketUser()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User answerTicketUser()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User notLoginUsers()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User kycVerified()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User planSubscribedUser()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User freeUser()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User subscriptionExpiredUser()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Foundation\Auth\User
  {
    //
  }

  /**
   * App\Models\UserLogin
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $os
   * @property string|null $browser
   * @property string|null $latitude
   * @property string|null $longitude
   * @property string|null $country_code
   * @property string|null $country
   * @property string|null $city
   * @property string|null $user_ip
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereUserIp($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereCity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereCountry($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereCountryCode($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereLongitude($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereLatitude($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereBrowser($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereOs($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<UserLogin>|UserLogin query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class UserLogin extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\WelcomeMessage
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property string|null $message
   * @property int $whatsapp_account_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\WhatsappAccount $whatsappAccount
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage whereWhatsappAccountId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage whereMessage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage active()
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<WelcomeMessage>|WelcomeMessage query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class WelcomeMessage extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\WhatsappAccount
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $is_default
   * @property string|null $meta_app_id
   * @property string $code_verification_status
   * @property string|null $access_token
   * @property string $phone_number_id
   * @property string|null $phone_number
   * @property string|null $whatsapp_business_account_id
   * @property string|null $business_name
   * @property int $user_id
   * @property int $id
   * @property-read mixed $verification_status_badge
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Chatbot> $chatbots
   * @property-read int|null $chatbots_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Template> $templates
   * @property-read int|null $templates_count
   * @property-read \App\Models\WelcomeMessage $welcomeMessage
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereBusinessName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereWhatsappBusinessAccountId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount wherePhoneNumber($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount wherePhoneNumberId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereAccessToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereCodeVerificationStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereMetaAppId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereIsDefault($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount apiQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<WhatsappAccount>|WhatsappAccount query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class WhatsappAccount extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\WithdrawMethod
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property bool $status
   * @property string|null $description
   * @property string|null $currency
   * @property float|null $percent_charge
   * @property float|null $rate
   * @property float|null $fixed_charge
   * @property float $max_limit
   * @property float|null $min_limit
   * @property string|null $image
   * @property string|null $name
   * @property int $form_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\Form $form
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereFormId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereImage($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereMinLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereMaxLimit($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereFixedCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereRate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod wherePercentCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereCurrency($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod active()
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod inactive()
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<WithdrawMethod>|WithdrawMethod query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class WithdrawMethod extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Withdrawal
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $admin_feedback
   * @property bool $status
   * @property object|null $withdraw_information
   * @property float $after_charge
   * @property float $final_amount
   * @property string|null $trx
   * @property float $charge
   * @property float $rate
   * @property string|null $currency
   * @property float $amount
   * @property int $user_id
   * @property int $method_id
   * @property int $id
   * @property-read mixed $status_badge
   * @property-read \App\Models\User $user
   * @property-read \App\Models\WithdrawMethod $method
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereMethodId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereCurrency($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereRate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereTrx($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereFinalAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereAfterCharge($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereWithdrawInformation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereAdminFeedback($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal pending()
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal approved()
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal rejected()
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Withdrawal>|Withdrawal query()
   * @method static mixed select($columns)
   * @method static mixed selectSub($query, $as)
   * @method static mixed selectRaw($expression, array $bindings)
   * @method static mixed fromSub($query, $as)
   * @method static mixed fromRaw($expression, $bindings)
   * @method static mixed createSub($query)
   * @method static mixed parseSub($query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
   * @method static mixed addSelect($column)
   * @method static mixed distinct()
   * @method static mixed from($table, $as)
   * @method static mixed useIndex($index)
   * @method static mixed forceIndex($index)
   * @method static mixed ignoreIndex($index)
   * @method static mixed join($table, $first, $operator, $second, $type, $where)
   * @method static mixed joinWhere($table, $first, $operator, $second, $type)
   * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
   * @method static mixed joinLateral($query, string $as, string $type)
   * @method static mixed leftJoinLateral($query, string $as)
   * @method static mixed leftJoin($table, $first, $operator, $second)
   * @method static mixed leftJoinWhere($table, $first, $operator, $second)
   * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed rightJoin($table, $first, $operator, $second)
   * @method static mixed rightJoinWhere($table, $first, $operator, $second)
   * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
   * @method static mixed crossJoin($table, $first, $operator, $second)
   * @method static mixed crossJoinSub($query, $as)
   * @method static mixed newJoinClause(self $parentQuery, $type, $table)
   * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
   * @method static mixed mergeWheres($wheres, $bindings)
   * @method static mixed where($column, $operator, $value, $boolean)
   * @method static mixed addArrayOfWheres($column, $boolean, $method)
   * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
   * @method static mixed invalidOperatorAndValue($operator, $value)
   * @method static mixed invalidOperator($operator)
   * @method static mixed isBitwiseOperator($operator)
   * @method static mixed orWhere($column, $operator, $value)
   * @method static mixed whereNot($column, $operator, $value, $boolean)
   * @method static mixed orWhereNot($column, $operator, $value)
   * @method static mixed whereColumn($first, $operator, $second, $boolean)
   * @method static mixed orWhereColumn($first, $operator, $second)
   * @method static mixed whereRaw($sql, $bindings, $boolean)
   * @method static mixed orWhereRaw($sql, $bindings)
   * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
   * @method static mixed orWhereLike($column, $value, $caseSensitive)
   * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
   * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
   * @method static mixed whereIn($column, $values, $boolean, $not)
   * @method static mixed orWhereIn($column, $values)
   * @method static mixed whereNotIn($column, $values, $boolean)
   * @method static mixed orWhereNotIn($column, $values)
   * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
   * @method static mixed orWhereIntegerInRaw($column, $values)
   * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
   * @method static mixed orWhereIntegerNotInRaw($column, $values)
   * @method static mixed whereNull($columns, $boolean, $not)
   * @method static mixed orWhereNull($column)
   * @method static mixed whereNotNull($columns, $boolean)
   * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
   * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
   * @method static mixed orWhereBetween($column, iterable $values)
   * @method static mixed orWhereBetweenColumns($column, array $values)
   * @method static mixed whereNotBetween($column, iterable $values, $boolean)
   * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
   * @method static mixed orWhereNotBetween($column, iterable $values)
   * @method static mixed orWhereNotBetweenColumns($column, array $values)
   * @method static mixed orWhereNotNull($column)
   * @method static mixed whereDate($column, $operator, $value, $boolean)
   * @method static mixed orWhereDate($column, $operator, $value)
   * @method static mixed whereTime($column, $operator, $value, $boolean)
   * @method static mixed orWhereTime($column, $operator, $value)
   * @method static mixed whereDay($column, $operator, $value, $boolean)
   * @method static mixed orWhereDay($column, $operator, $value)
   * @method static mixed whereMonth($column, $operator, $value, $boolean)
   * @method static mixed orWhereMonth($column, $operator, $value)
   * @method static mixed whereYear($column, $operator, $value, $boolean)
   * @method static mixed orWhereYear($column, $operator, $value)
   * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
   * @method static mixed whereNested(Closure $callback, $boolean)
   * @method static mixed forNestedWhere()
   * @method static mixed addNestedWhereQuery($query, $boolean)
   * @method static mixed whereSub($column, $operator, $callback, $boolean)
   * @method static mixed whereExists($callback, $boolean, $not)
   * @method static mixed orWhereExists($callback, $not)
   * @method static mixed whereNotExists($callback, $boolean)
   * @method static mixed orWhereNotExists($callback)
   * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
   * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
   * @method static mixed orWhereRowValues($columns, $operator, $values)
   * @method static mixed whereJsonContains($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonContains($column, $value)
   * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntContain($column, $value)
   * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
   * @method static mixed orWhereJsonOverlaps($column, $value)
   * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
   * @method static mixed orWhereJsonDoesntOverlap($column, $value)
   * @method static mixed whereJsonContainsKey($column, $boolean, $not)
   * @method static mixed orWhereJsonContainsKey($column)
   * @method static mixed whereJsonDoesntContainKey($column, $boolean)
   * @method static mixed orWhereJsonDoesntContainKey($column)
   * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
   * @method static mixed orWhereJsonLength($column, $operator, $value)
   * @method static mixed dynamicWhere($method, $parameters)
   * @method static mixed addDynamic($segment, $connector, $parameters, $index)
   * @method static mixed whereFullText($columns, $value, array $options, $boolean)
   * @method static mixed orWhereFullText($columns, $value, array $options)
   * @method static mixed whereAll($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAll($columns, $operator, $value)
   * @method static mixed whereAny($columns, $operator, $value, $boolean)
   * @method static mixed orWhereAny($columns, $operator, $value)
   * @method static mixed whereNone($columns, $operator, $value, $boolean)
   * @method static mixed orWhereNone($columns, $operator, $value)
   * @method static mixed groupBy($groups)
   * @method static mixed groupByRaw($sql, array $bindings)
   * @method static mixed having($column, $operator, $value, $boolean)
   * @method static mixed orHaving($column, $operator, $value)
   * @method static mixed havingNested(Closure $callback, $boolean)
   * @method static mixed addNestedHavingQuery($query, $boolean)
   * @method static mixed havingNull($columns, $boolean, $not)
   * @method static mixed orHavingNull($column)
   * @method static mixed havingNotNull($columns, $boolean)
   * @method static mixed orHavingNotNull($column)
   * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
   * @method static mixed havingRaw($sql, array $bindings, $boolean)
   * @method static mixed orHavingRaw($sql, array $bindings)
   * @method static mixed orderBy($column, $direction)
   * @method static mixed orderByDesc($column)
   * @method static mixed latest($column)
   * @method static mixed oldest($column)
   * @method static mixed inRandomOrder($seed)
   * @method static mixed orderByRaw($sql, $bindings)
   * @method static mixed skip($value)
   * @method static mixed offset($value)
   * @method static mixed take($value)
   * @method static mixed limit($value)
   * @method static mixed groupLimit($value, $column)
   * @method static mixed forPage($page, $perPage)
   * @method static mixed forPageBeforeId($perPage, $lastId, $column)
   * @method static mixed forPageAfterId($perPage, $lastId, $column)
   * @method static mixed reorder($column, $direction)
   * @method static mixed removeExistingOrdersFor($column)
   * @method static mixed union($query, $all)
   * @method static mixed unionAll($query)
   * @method static mixed lock($value)
   * @method static mixed lockForUpdate()
   * @method static mixed sharedLock()
   * @method static mixed beforeQuery(callable $callback)
   * @method static mixed applyBeforeQueryCallbacks()
   * @method static mixed afterQuery(Closure $callback)
   * @method static mixed applyAfterQueryCallbacks($result)
   * @method static mixed toSql()
   * @method static mixed toRawSql()
   * @method static mixed find($id, $columns)
   * @method static mixed findOr($id, $columns, Closure $callback)
   * @method static mixed value($column)
   * @method static mixed rawValue(string $expression, array $bindings)
   * @method static mixed soleValue($column)
   * @method static mixed get($columns)
   * @method static mixed runSelect()
   * @method static mixed withoutGroupLimitKeys($items)
   * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
   * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
   * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
   * @method static mixed ensureOrderForCursorPagination($shouldReverse)
   * @method static mixed getCountForPagination($columns)
   * @method static mixed runPaginationCountQuery($columns)
   * @method static mixed cloneForPaginationCount()
   * @method static mixed withoutSelectAliases(array $columns)
   * @method static mixed cursor()
   * @method static mixed enforceOrderBy()
   * @method static mixed pluck($column, $key)
   * @method static mixed stripTableForPluck($column)
   * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
   * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
   * @method static mixed implode($column, $glue)
   * @method static mixed exists()
   * @method static mixed doesntExist()
   * @method static mixed existsOr(Closure $callback)
   * @method static mixed doesntExistOr(Closure $callback)
   * @method static mixed count($columns)
   * @method static mixed min($column)
   * @method static mixed max($column)
   * @method static mixed sum($column)
   * @method static mixed avg($column)
   * @method static mixed average($column)
   * @method static mixed aggregate($function, $columns)
   * @method static mixed numericAggregate($function, $columns)
   * @method static mixed setAggregate($function, $columns)
   * @method static mixed onceWithColumns($columns, $callback)
   * @method static mixed insert(array $values)
   * @method static mixed insertOrIgnore(array $values)
   * @method static mixed insertGetId(array $values, $sequence)
   * @method static mixed insertUsing(array $columns, $query)
   * @method static mixed insertOrIgnoreUsing(array $columns, $query)
   * @method static mixed update(array $values)
   * @method static mixed updateFrom(array $values)
   * @method static mixed updateOrInsert(array $attributes, callable|array $values)
   * @method static mixed upsert(array $values, $uniqueBy, $update)
   * @method static mixed increment($column, $amount, array $extra)
   * @method static mixed incrementEach(array $columns, array $extra)
   * @method static mixed decrement($column, $amount, array $extra)
   * @method static mixed decrementEach(array $columns, array $extra)
   * @method static mixed delete($id)
   * @method static mixed truncate()
   * @method static mixed newQuery()
   * @method static mixed forSubQuery()
   * @method static mixed getColumns()
   * @method static mixed raw($value)
   * @method static mixed getUnionBuilders()
   * @method static mixed getBindings()
   * @method static mixed getRawBindings()
   * @method static mixed setBindings(array $bindings, $type)
   * @method static mixed addBinding($value, $type)
   * @method static mixed castBinding($value)
   * @method static mixed mergeBindings(self $query)
   * @method static mixed cleanBindings(array $bindings)
   * @method static mixed flattenValue($value)
   * @method static mixed defaultKeyName()
   * @method static mixed getConnection()
   * @method static mixed getProcessor()
   * @method static mixed getGrammar()
   * @method static mixed useWritePdo()
   * @method static mixed isQueryable($value)
   * @method static mixed clone()
   * @method static mixed cloneWithout(array $properties)
   * @method static mixed cloneWithoutBindings(array $except)
   * @method static mixed dump($args)
   * @method static mixed dumpRawSql()
   * @method static mixed dd()
   * @method static mixed ddRawSql()
   * @method static mixed wherePast($columns)
   * @method static mixed whereNowOrPast($columns)
   * @method static mixed orWherePast($columns)
   * @method static mixed orWhereNowOrPast($columns)
   * @method static mixed whereFuture($columns)
   * @method static mixed whereNowOrFuture($columns)
   * @method static mixed orWhereFuture($columns)
   * @method static mixed orWhereNowOrFuture($columns)
   * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
   * @method static mixed whereToday($columns, $boolean)
   * @method static mixed whereBeforeToday($columns)
   * @method static mixed whereTodayOrBefore($columns)
   * @method static mixed whereAfterToday($columns)
   * @method static mixed whereTodayOrAfter($columns)
   * @method static mixed orWhereToday($columns)
   * @method static mixed orWhereBeforeToday($columns)
   * @method static mixed orWhereTodayOrBefore($columns)
   * @method static mixed orWhereAfterToday($columns)
   * @method static mixed orWhereTodayOrAfter($columns)
   * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
   * @method static mixed chunk($count, callable $callback)
   * @method static mixed chunkMap(callable $callback, $count)
   * @method static mixed each(callable $callback, $count)
   * @method static mixed chunkById($count, callable $callback, $column, $alias)
   * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
   * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
   * @method static mixed eachById(callable $callback, $count, $column, $alias)
   * @method static mixed lazy($chunkSize)
   * @method static mixed lazyById($chunkSize, $column, $alias)
   * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
   * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
   * @method static mixed first($columns)
   * @method static mixed firstOrFail($columns, $message)
   * @method static mixed sole($columns)
   * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
   * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
   * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
   * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
   * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
   * @method static mixed tap($callback)
   * @method static mixed when($value, callable $callback, callable $default)
   * @method static mixed unless($value, callable $callback, callable $default)
   * @method static mixed explain()
   * @method static mixed forwardCallTo($object, $method, $parameters)
   * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
   * @method static mixed throwBadMethodCallException($method)
   * @method static mixed macro($name, $macro)
   * @method static mixed mixin($mixin, $replace)
   * @method static mixed hasMacro($name)
   * @method static mixed flushMacros()
   * @method static mixed macroCall($method, $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Withdrawal extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

}